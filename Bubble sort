// bubble sort using recursion

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] arr={4,3,2,1};
		bubble(arr,arr.length-1,0);
		System.out.println(Arrays.toString(arr));
	}
	static void bubble(int[] arr,int r,int c){
	    if(r==0){
	        return;
	    }
	    if(c<r){
	        if(arr[c]>arr[c+1]){
	            //swap
	            int temp=arr[c];
	            arr[c]=arr[c+1];
	            arr[c+1]=temp;
	        }
	        bubble(arr,r,c+1);
	    }else{
	        bubble(arr,r-1,0);
	    }
	}
}



// merge sort
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    int[] arr={5,4,3,2,1};
	    arr=mergesort(arr);
	    
		System.out.println(Arrays.toString(arr));
	}
	static int[] mergesort(int[] arr){
	    if(arr.length==1){
	        return arr;
	    }
	    int mid=arr.length/2;
	    int[] left=mergesort(Arrays.copyOfRange(arr,0,mid));
	    int[] right=mergesort(Arrays.copyOfRange(arr,mid,arr.length));
	    return merge(left,right);
	}
	private static int[] merge(int[] first,int[] second){
	    int[] mix=new int[first.length+second.length];
	    int k=0;
	    int i=0;
	    int j=0;
	    while(i < first.length && j < second.length){
	        if(first[i] <second[j]){
	            mix[k]=first[i];
	            i++;
	        }
	        else{
	            mix[k]=second[j];
	            j++;
	        }
	        k++;
	    }
	    while(i<first.length){
	        mix[k]=first[i];
	        i++;
	        k++;
	    }
	    while(j<first.length){
	        mix[k]=second[j];
	        j++;
	        k++;
	    }
	    return mix;
	}
}
